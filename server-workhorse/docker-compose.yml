# ==============================
# 서비스(컨테이너) 정의
# ==============================
services:
  # --------------------------------
  # 데이터 수집/전처리 후 PostgreSQL 저장
  # --------------------------------
  my-mlops-db:
    image: postgres:13                          # PostgreSQL 공식 이미지(버전 13)
    container_name: ${DB_HOST}                  # 컨테이너 이름
    environment:
      POSTGRES_USER: ${POSTGRES_USER}           # DB 계정명
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}   # DB 비밀번호
      POSTGRES_DB: ${POSTGRES_DB}               # DB 이름
    ports:
      - ${DB_PORT}:${DB_PORT}                   # 호스트:컨테이너 포트(5432)
    volumes:
      - db_data:/var/lib/postgresql/data        # 데이터 파일을 로컬 볼륨에 영구 저장
    networks:
      - my-mlops-network                        # 동일 네트워크(통신)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}", "postgres"] # DB 준비상태 체크
      interval: 5s                              # 체크 주기
      timeout: 3s                               # 타임아웃
      retries: 5                                # 최대 재시도
    restart: on-failure                         # 장애 시 재시작

  # --------------------------------
  # 모델 학습 및 추론 서비스
  # --------------------------------
  my-mlops-model:
    build:
      context: .                                          # 빌드 컨텍스트를 상위 디렉토리로 설정
      dockerfile: ${DOCKER_MODEL_INFERENCE}               # Dockerfile 경로
      args:
        EXCLUDE_FRONTEND: "true"
    image: jkim1209/mlops-model:1.4.4                     # 이미지 이름 및 태그
    container_name: my-mlops-model                        # 컨테이너 이름
    environment:
      DB_HOST: ${DB_HOST}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: ${DB_PORT}

      TMDB_API_KEY: ${TMDB_API_KEY}
      TMDB_BASE_URL: ${TMDB_BASE_URL}

      S3_BUCKET_NAME: ${S3_BUCKET_NAME}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
    networks:
      - my-mlops-network
    depends_on:
      - my-mlops-db  
    healthcheck:
      test: ["CMD-SHELL", "echo", "healthcheck"]
      interval: 1m30s
      timeout: 10s
      retries: 3

  # --------------------------------
  # FastAPI 서비스
  # --------------------------------
  my-mlops-api:
    build:
      context: .
      dockerfile: ${DOCKER_API}
      args:
        EXCLUDE_FRONTEND: "true"
    image: jkim1209/mlops-api:1.3.4
    container_name: my-mlops-api
    command: uvicorn scripts.webapp:app --host 0.0.0.0 --port 8000
    ports:
      - "8000:8000"
    env_file:
      - ${ENV_PATH}
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    networks:
      - my-mlops-network
    depends_on:
      my-mlops-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8000/docs || exit 1"]  # /docs 엔드포인트 200 OK 확인
      interval: 10s                                     # 헬스체크 주기(10초)
      timeout: 10s                                      # 응답 대기(10초)
      retries: 3                                        # 최대 3번 재시도
      start_period: 20s                                 # 컨테이너 기동 후 최초 체크까지 대기(20초)
    restart: always


# ==============================
# React 프론트엔드 서비스
# ==============================
  my-mlops-frontend:
    build:
      context: .
      dockerfile: ${DOCKER_REACT}
    image: jkim1209/mlops-frontend:1.2.0
    container_name: my-mlops-frontend
    ports:
      - "3000:3000"
    depends_on:
      - my-mlops-api
    networks:
      - my-mlops-network
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:3000 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 20s

# ==============================
# Docker 볼륨 및 네트워크 정의
# ==============================
volumes:
  db_data:              # PostgreSQL 데이터 파일 영구 저장용 도커 볼륨

networks:
  my-mlops-network:     # Airflow, DB, Redis, Flower 등 모든 서비스가 연결되는 네트워크
    driver: bridge      # 브리지 네트워크(컨테이너 통신 전용)
