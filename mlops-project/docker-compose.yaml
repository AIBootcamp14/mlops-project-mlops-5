# docker-compose.yaml 파일 내용

version: '3.8'

x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.8.2} # AIRFLOW_VERSION 변수 사용
  environment:
    AIRFLOW_UID: ${AIRFLOW_UID:-50000}
    AIRFLOW_GID: ${AIRFLOW_GID:-0}
    AIRFLOW_HOME: /opt/airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: ${AIRFLOW__CORE__SQL_ALCHEMY_CONN}
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
    AIRFLOW__CELERY__BROKER_URL: ${AIRFLOW__CELERY__BROKER_URL}
    AIRFLOW__CELERY__RESULT_BACKEND: ${AIRFLOW__CELERY__RESULT_BACKEND}
    # Airflow 로그 레벨 설정 (디버깅 시 유용)
    AIRFLOW__CORE__LOGGING_LEVEL: INFO
    # Airflow 웹서버 포트
    AIRFLOW__WEBSERVER__WEB_SERVER_PORT: 8080
  volumes:
    # DAGs 폴더 마운트
    - ${DAGS_DIR}:/opt/airflow/dags
    # 로그 폴더 마운트
    - ${LOGS_AIRFLOW_DIR}:/opt/airflow/logs
    # Data 폴더 마운트 (외부 데이터 접근용)
    - ${DATA_AIRFLOW_DIR}:/opt/airflow/data
    # 플러그인 폴더 마운트 (필요시 사용)
    - ${PLUGINS_AIRFLOW_DIR}:/opt/airflow/plugins
  networks:
    - airflow_network
  # 컨테이너 재시작 정책
  restart: on-failure
  # Airflow 웹서버/스케줄러/워커에 대한 의존성 설정
  depends_on:
    postgres:
      condition: service_healthy
    redis:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      # postgres_data는 호스트 경로가 아닌 Docker가 관리하는 명명된 볼륨이므로 변경하지 않습니다.
      - postgres_data:/var/lib/postgresql/data
    networks:
      - airflow_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: on-failure

  redis:
    image: redis:6.2-alpine
    networks:
      - airflow_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: on-failure

  webserver:
    <<: *airflow-common # 공통 설정 상속
    command: webserver
    ports:
      - "8080:8080" # Airflow Web UI 포트
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: on-failure

  scheduler:
    <<: *airflow-common # 공통 설정 상속
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", "airflow jobs check --job-type SchedulerJob --hostname $(hostname)"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: on-failure

  worker:
    <<: *airflow-common # 공통 설정 상속
    command: worker
    restart: on-failure

  flower:
    image: mher/flower:1.2.0
    environment:
      CELERY_BROKER_URL: ${AIRFLOW__CELERY__BROKER_URL}
      CELERY_RESULT_BACKEND: ${AIRFLOW__CELERY__RESULT_BACKEND}
    ports:
      - "${FLOWER_PORT:-5555}:5555" # Flower UI 포트
    networks:
      - airflow_network
    depends_on:
      - redis
      - worker
    restart: on-failure

volumes:
  postgres_data:

networks:
  airflow_network:
    driver: bridge # Airflow 전용 Docker 네트워크